/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DiamondLoupe, DiamondLoupeInterface } from "../DiamondLoupe";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "selectors",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "selectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "diamondFacets",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bc8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806352ef6b2c146100515780637a0ed6271461006f578063adfca15e14610084578063cdffacc6146100a4575b600080fd5b6100596100f6565b6040516100669190610a45565b60405180910390f35b6100776102eb565b6040516100669190610aa5565b6100976100923660046109ab565b61081b565b6040516100669190610a92565b6100de6100b23660046109d9565b6001600160e01b0319166000908152600080516020610b73833981519152602052604090205460601c90565b6040516001600160a01b039091168152602001610066565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9454606090600080516020610b738339815191529061ffff1667ffffffffffffffff81111561015557634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561017e578160200160208202803683370190505b50915060008060005b600184015461ffff168210156102e3576000818152600285016020526040812054905b60088110156102ce57836101bd81610b21565b600188015490955061ffff1685111590506101d7576102ce565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b88811015610263578a818151811061022757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316836001600160a01b031614156102515760019150610263565b8061025b81610b21565b9150506101ff565b508015610272575050506102bc565b818a898151811061029357634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152876102b581610b21565b9850505050505b806102c681610b21565b9150506101aa565b505080806102db90610b21565b915050610187565b505082525090565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9454606090600080516020610b738339815191529061ffff1667ffffffffffffffff81111561034a57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561039057816020015b6040805180820190915260008152606060208201528152602001906001900390816103685790505b50600182015490925060009061ffff1667ffffffffffffffff8111156103c657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156103ef578160200160208202803683370190505b50905060008060005b600185015461ffff1682101561078d576000818152600286016020526040812054905b6008811015610778578361042e81610b21565b600189015490955061ffff16851115905061044857610778565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156105e257826001600160a01b03168c82815181106104a257634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b031614156105d057838c82815181106104de57634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518b838151811061050a57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff168151811061053357634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061057757634e487b7160e01b600052603260045260246000fd5b602002602001015160ff161061058c57600080fd5b8981815181106105ac57634e487b7160e01b600052603260045260246000fd5b6020026020010180518091906105c190610b3c565b60ff16905250600191506105e2565b806105da81610b21565b915050610470565b5080156105f157505050610766565b818b898151811061061257634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561065957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610682578160200160208202803683370190505b508b89815181106106a357634e487b7160e01b600052603260045260246000fd5b602002602001015160200181905250828b89815181106106d357634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516000815181106106ff57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160e01b03191690816001600160e01b03191681525050600189898151811061074357634e487b7160e01b600052603260045260246000fd5b60ff909216602092830291909101909101528761075f81610b21565b9850505050505b8061077081610b21565b91505061041b565b5050808061078590610b21565b9150506103f8565b5060005b828110156108105760008482815181106107bb57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff16905060008783815181106107ea57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190508181525050808061080890610b21565b915050610791565b508185525050505090565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9454606090600080516020610b738339815191529061ffff1667ffffffffffffffff81111561087a57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108a3578160200160208202803683370190505b50915060008060005b600184015461ffff168210156109a1576000818152600285016020526040812054905b600881101561098c57836108e281610b21565b600188015490955061ffff1685111590506108fc5761098c565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a161415610979578088878151811061095257634e487b7160e01b600052603260045260246000fd5b6001600160e01b0319909216602092830291909101909101528561097581610b21565b9650505b508061098481610b21565b9150506108cf565b5050808061099990610b21565b9150506108ac565b5050825250919050565b6000602082840312156109bc578081fd5b81356001600160a01b03811681146109d2578182fd5b9392505050565b6000602082840312156109ea578081fd5b81356001600160e01b0319811681146109d2578182fd5b6000815180845260208085019450808401835b83811015610a3a5781516001600160e01b03191687529582019590820190600101610a14565b509495945050505050565b6020808252825182820181905260009190848201906040850190845b81811015610a865783516001600160a01b031683529284019291840191600101610a61565b50909695505050505050565b6020815260006109d26020830184610a01565b60006020808301818452808551808352604092508286019150828160051b870101848801865b83811015610b1357888303603f19018552815180516001600160a01b03168452870151878401879052610b0087850182610a01565b9588019593505090860190600101610acb565b509098975050505050505050565b6000600019821415610b3557610b35610b5c565b5060010190565b600060ff821660ff811415610b5357610b53610b5c565b60010192915050565b634e487b7160e01b600052601160045260246000fdfe177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93a264697066735822122036e36e662b33c80592a58f69e5851ed7674a7d9949514db40e7ca6aec781074e64736f6c63430008040033";

export class DiamondLoupe__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DiamondLoupe> {
    return super.deploy(overrides || {}) as Promise<DiamondLoupe>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondLoupe {
    return super.attach(address) as DiamondLoupe;
  }
  connect(signer: Signer): DiamondLoupe__factory {
    return super.connect(signer) as DiamondLoupe__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondLoupeInterface {
    return new utils.Interface(_abi) as DiamondLoupeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondLoupe {
    return new Contract(address, _abi, signerOrProvider) as DiamondLoupe;
  }
}
