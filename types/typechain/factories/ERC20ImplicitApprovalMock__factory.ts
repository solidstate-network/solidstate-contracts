/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20ImplicitApprovalMock,
  ERC20ImplicitApprovalMockInterface,
} from "../ERC20ImplicitApprovalMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "approvedAccounts",
        type: "address[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "isImplicitlyApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000c5a38038062000c5a833981016040819052620000349162000114565b60006200004b620000d360201b6200027e1760201c565b905060005b8251811015620000ca5760018260000160008584815181106200008357634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580620000c181620001e8565b91505062000050565b50505062000226565b7fe076a236189d11087e6f258f7a69f2a5a83c9b57f620c90fb346111bfd9ecf7e90565b80516001600160a01b03811681146200010f57600080fd5b919050565b6000602080838503121562000127578182fd5b82516001600160401b03808211156200013e578384fd5b818501915085601f83011262000152578384fd5b81518181111562000167576200016762000210565b8060051b604051601f19603f830116810181811085821117156200018f576200018f62000210565b604052828152858101935084860182860187018a1015620001ae578788fd5b8795505b83861015620001db57620001c681620000f7565b855260019590950194938601938601620001b2565b5098975050505050505050565b60006000198214156200020957634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b610a2480620002366000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806370a082311161006657806370a08231146101195780639dc29fac1461014f578063a8da6aa714610162578063a9059cbb14610175578063dd62ed3e1461018857600080fd5b8063095ea7b31461009857806318160ddd146100c057806323b872dd146100f157806340c10f1914610104575b600080fd5b6100ab6100a6366004610960565b61019b565b60405190151581526020015b60405180910390f35b7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b6545b6040519081526020016100b7565b6100ab6100ff366004610925565b6101b2565b610117610112366004610960565b6101ea565b005b6100e36101273660046108d9565b6001600160a01b031660009081526000805160206109cf833981519152602052604090205490565b61011761015d366004610960565b6101f8565b6100ab6101703660046108d9565b610202565b6100ab610183366004610960565b61020d565b6100e36101963660046108f3565b61021a565b60006101a83384846102a2565b5060015b92915050565b60006101bd336103eb565b156101d5576101cd848484610417565b5060016101e3565b6101e08484846105f7565b90505b9392505050565b6101f482826106be565b5050565b6101f482826107c7565b60006101ac826103eb565b60006101a8338484610417565b6000610225826103eb565b1561023357506000196101ac565b506001600160a01b0382811660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b560209081526040808320938516835292905220546101ac565b7fe076a236189d11087e6f258f7a69f2a5a83c9b57f620c90fb346111bfd9ecf7e90565b6001600160a01b0383166103095760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084015b60405180910390fd5b6001600160a01b03821661036a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610300565b6001600160a01b0383811660008181527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b5602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60006103f561027e565b6001600160a01b03909216600090815260209290925250604090205460ff1690565b6001600160a01b03831661047b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610300565b6001600160a01b0382166104dd5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610300565b6001600160a01b03831660009081526000805160206109cf8339815191526020819052604090912054828110156105655760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610300565b6001600160a01b0380861660009081526020849052604080822086850390559186168152908120805485929061059c908490610989565b92505081905550836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516105e891815260200190565b60405180910390a35050505050565b6001600160a01b03831660009081527fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b5602090815260408083203384529091528120548281101561069b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610300565b6106a885338584036102a2565b6106b3858585610417565b506001949350505050565b6001600160a01b0382166107145760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610300565b7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b680546000805160206109cf833981519152918391600090610757908490610989565b90915550506001600160a01b03831660009081526020829052604081208054849290610784908490610989565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016103de565b6001600160a01b0382166108275760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610300565b6001600160a01b03821660009081526000805160206109cf83398151915260208190526040822080549192849261085f9084906109a1565b925050819055508181600201600082825461087a91906109a1565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016103de565b80356001600160a01b03811681146108d457600080fd5b919050565b6000602082840312156108ea578081fd5b6101e3826108bd565b60008060408385031215610905578081fd5b61090e836108bd565b915061091c602084016108bd565b90509250929050565b600080600060608486031215610939578081fd5b610942846108bd565b9250610950602085016108bd565b9150604084013590509250925092565b60008060408385031215610972578182fd5b61097b836108bd565b946020939093013593505050565b6000821982111561099c5761099c6109b8565b500190565b6000828210156109b3576109b36109b8565b500390565b634e487b7160e01b600052601160045260246000fdfec991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b4a2646970667358221220797b2ccb23bdedc5ce75069d02a459bcc1a85ab9aae741cd502c82aa5b5c804964736f6c63430008040033";

export class ERC20ImplicitApprovalMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    approvedAccounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20ImplicitApprovalMock> {
    return super.deploy(
      approvedAccounts,
      overrides || {}
    ) as Promise<ERC20ImplicitApprovalMock>;
  }
  getDeployTransaction(
    approvedAccounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(approvedAccounts, overrides || {});
  }
  attach(address: string): ERC20ImplicitApprovalMock {
    return super.attach(address) as ERC20ImplicitApprovalMock;
  }
  connect(signer: Signer): ERC20ImplicitApprovalMock__factory {
    return super.connect(signer) as ERC20ImplicitApprovalMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20ImplicitApprovalMockInterface {
    return new utils.Interface(_abi) as ERC20ImplicitApprovalMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20ImplicitApprovalMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC20ImplicitApprovalMock;
  }
}
