/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ProxyMock, ProxyMockInterface } from "../ProxyMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161015938038061015983398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b60c9806100906000396000f3fe60806040526000546001600160a01b0316803b60705760405162461bcd60e51b815260206004820152602660248201527f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f6044820152651b9d1c9858dd60d21b606482015260840160405180910390fd5b3660008037600080366000845af43d6000803e808015608e573d6000f35b3d6000fdfea26469706673582212202afc01ab0c74778f52df15a4789246935113f0e0bc347d19081f727bb942722a64736f6c63430008040033";

export class ProxyMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ProxyMock> {
    return super.deploy(implementation, overrides || {}) as Promise<ProxyMock>;
  }
  getDeployTransaction(
    implementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(implementation, overrides || {});
  }
  attach(address: string): ProxyMock {
    return super.attach(address) as ProxyMock;
  }
  connect(signer: Signer): ProxyMock__factory {
    return super.connect(signer) as ProxyMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyMockInterface {
    return new utils.Interface(_abi) as ProxyMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyMock {
    return new Contract(address, _abi, signerOrProvider) as ProxyMock;
  }
}
