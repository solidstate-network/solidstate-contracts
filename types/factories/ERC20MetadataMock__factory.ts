/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20MetadataMock,
  ERC20MetadataMockInterface,
} from "../ERC20MetadataMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161062838038061062883398101604081905261002f9161023d565b600061004361009360201b61014c1760201c565b905061005c84826100b760201b6101701790919060201c565b61007383826100ce60201b6101871790919060201c565b61008a82826100e360201b61019c1790919060201c565b50505050610307565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790565b80516100c990839060208401906100fc565b505050565b80516100c990600184019060208401906100fc565b600291909101805460ff191660ff909216919091179055565b828054610108906102b6565b90600052602060002090601f01602090048101928261012a5760008555610170565b82601f1061014357805160ff1916838001178555610170565b82800160010185558215610170579182015b82811115610170578251825591602001919060010190610155565b5061017c929150610180565b5090565b5b8082111561017c5760008155600101610181565b600082601f8301126101a5578081fd5b81516001600160401b03808211156101bf576101bf6102f1565b604051601f8301601f19908116603f011681019082821181831017156101e7576101e76102f1565b81604052838152602092508683858801011115610202578485fd5b8491505b838210156102235785820183015181830184015290820190610206565b8382111561023357848385830101525b9695505050505050565b600080600060608486031215610251578283fd5b83516001600160401b0380821115610267578485fd5b61027387838801610195565b94506020860151915080821115610288578384fd5b5061029586828701610195565b925050604084015160ff811681146102ab578182fd5b809150509250925092565b600181811c908216806102ca57607f821691505b602082108114156102eb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610312806103166000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306fdde0314610046578063313ce5671461006457806395d89b411461007e575b600080fd5b61004e610086565b60405161005b919061024e565b60405180910390f35b61006c61011e565b60405160ff909116815260200161005b565b61004e610134565b606061009061014c565b805461009b906102a1565b80601f01602080910402602001604051908101604052809291908181526020018280546100c7906102a1565b80156101145780601f106100e957610100808354040283529160200191610114565b820191906000526020600020905b8154815290600101906020018083116100f757829003601f168201915b5050505050905090565b600061012861014c565b6002015460ff16919050565b606061013e61014c565b600101805461009b906102a1565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790565b805161018290839060208401906101b5565b505050565b805161018290600184019060208401906101b5565b600291909101805460ff191660ff909216919091179055565b8280546101c1906102a1565b90600052602060002090601f0160209004810192826101e35760008555610229565b82601f106101fc57805160ff1916838001178555610229565b82800160010185558215610229579182015b8281111561022957825182559160200191906001019061020e565b50610235929150610239565b5090565b5b80821115610235576000815560010161023a565b6000602080835283518082850152825b8181101561027a5785810183015185820160400152820161025e565b8181111561028b5783604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806102b557607f821691505b602082108114156102d657634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220a186b91c9be12b1bab852d853cc38019e34c42ba31bc36ac195584bb22417b5d64736f6c63430008040033";

export class ERC20MetadataMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20MetadataMock> {
    return super.deploy(
      name,
      symbol,
      decimals,
      overrides || {}
    ) as Promise<ERC20MetadataMock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, decimals, overrides || {});
  }
  attach(address: string): ERC20MetadataMock {
    return super.attach(address) as ERC20MetadataMock;
  }
  connect(signer: Signer): ERC20MetadataMock__factory {
    return super.connect(signer) as ERC20MetadataMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MetadataMockInterface {
    return new utils.Interface(_abi) as ERC20MetadataMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20MetadataMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20MetadataMock;
  }
}
