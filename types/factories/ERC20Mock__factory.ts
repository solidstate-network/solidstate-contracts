/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20Mock, ERC20MockInterface } from "../ERC20Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "holder",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200124d3803806200124d8339810160408190526200003491620003a0565b60006200004b620000b260201b620005af1760201c565b9050620000678582620000d660201b620005d31790919060201c565b620000818482620000ef60201b620005ea1790919060201c565b6200009b83826200010660201b620005ff1790919060201c565b620000a733836200011f565b50505050506200049f565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790565b8051620000ea908390602084019062000247565b505050565b8051620000ea906001840190602084019062000247565b600291909101805460ff191660ff909216919091179055565b6001600160a01b0382166200017a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b6000620001916200022360201b620006181760201c565b905081816002016000828254620001a9919062000427565b90915550506001600160a01b03831660009081526020829052604081208054849290620001d890849062000427565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b490565b82805462000255906200044c565b90600052602060002090601f016020900481019282620002795760008555620002c4565b82601f106200029457805160ff1916838001178555620002c4565b82800160010185558215620002c4579182015b82811115620002c4578251825591602001919060010190620002a7565b50620002d2929150620002d6565b5090565b5b80821115620002d25760008155600101620002d7565b600082601f830112620002fe578081fd5b81516001600160401b03808211156200031b576200031b62000489565b604051601f8301601f19908116603f0116810190828211818310171562000346576200034662000489565b8160405283815260209250868385880101111562000362578485fd5b8491505b8382101562000385578582018301518183018401529082019062000366565b838211156200039657848385830101525b9695505050505050565b60008060008060808587031215620003b6578384fd5b84516001600160401b0380821115620003cd578586fd5b620003db88838901620002ed565b95506020870151915080821115620003f1578485fd5b506200040087828801620002ed565b935050604085015160ff8116811462000417578283fd5b6060959095015193969295505050565b600082198211156200044757634e487b7160e01b81526011600452602481fd5b500190565b600181811c908216806200046157607f821691505b602082108114156200048357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610d9e80620004af6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac1461019b578063a457c2d7146101ae578063a9059cbb146101c1578063dd62ed3e146101d457600080fd5b806340c10f191461016b57806370a082311461018057806395d89b411461019357600080fd5b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461011557806323b872dd1461012b578063313ce5671461013e5780633950935114610158575b600080fd5b6100dc6101e7565b6040516100e99190610c95565b60405180910390f35b610105610100366004610c6c565b61027f565b60405190151581526020016100e9565b61011d610295565b6040519081526020016100e9565b610105610139366004610c31565b6102a8565b610146610366565b60405160ff90911681526020016100e9565b610105610166366004610c6c565b61037c565b61017e610179366004610c6c565b610445565b005b61011d61018e366004610bde565b610453565b6100dc61047c565b61017e6101a9366004610c6c565b610494565b6101056101bc366004610c6c565b61049e565b6101056101cf366004610c6c565b610568565b61011d6101e2366004610bff565b610575565b60606101f16105af565b80546101fc90610d17565b80601f016020809104026020016040519081016040528092919081815260200182805461022890610d17565b80156102755780601f1061024a57610100808354040283529160200191610275565b820191906000526020600020905b81548152906001019060200180831161025857829003601f168201915b5050505050905090565b600061028c33848461063c565b50600192915050565b600061029f610618565b60020154905090565b6000806102b3610618565b6001600160a01b0386166000908152600191909101602090815260408083203384529091529020549050828110156103435760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610350853385840361063c565b61035b858585610771565b506001949350505050565b60006103706105af565b6002015460ff16919050565b600080610387610618565b336000908152600191909101602090815260408083206001600160a01b038816845291829052909120549091508381018111156104115760405162461bcd60e51b815260206004820152602260248201527f4552433230457874656e6465643a2065786365737369766520616c6c6f77616e604482015261636560f01b606482015260840161033a565b61035b33868684018560008a6001600160a01b03166001600160a01b0316815260200190815260200160002081905561063c565b61044f828261094e565b5050565b600061045d610618565b6001600160a01b03909216600090815260209290925250604090205490565b60606104866105af565b60010180546101fc90610d17565b61044f8282610a34565b6000806104a9610618565b336000908152600191909101602090815260408083206001600160a01b03881684529182905290912054909150808411156105345760405162461bcd60e51b815260206004820152602560248201527f4552433230457874656e6465643a20696e73756666696369656e7420616c6c6f60448201526477616e636560d81b606482015260840161033a565b61035b33868684038560008a6001600160a01b03166001600160a01b0316815260200190815260200160002081905561063c565b600061028c338484610771565b600061057f610618565b6001600160a01b039384166000908152600191909101602090815260408083209490951682529290925250205490565b7f2967a798b92539a1b9eefe4d8eb931f96b68d27665e276f1bee2d5db7f74304790565b80516105e59083906020840190610b29565b505050565b80516105e59060018401906020840190610b29565b600291909101805460ff191660ff909216919091179055565b7fc991b2e918acaba8e5721668ed0b1982684e5a8692a621bcd2d7ef326bb015b490565b6001600160a01b03831661069e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161033a565b6001600160a01b0382166106ff5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161033a565b80610708610618565b6001600160a01b038581166000818152600193909301602090815260408085209388168086529382529384902094909455915184815290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166107d55760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161033a565b6001600160a01b0382166108375760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161033a565b6000610841610618565b6001600160a01b038516600090815260208290526040902054909150828110156108bc5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161033a565b6001600160a01b038086166000908152602084905260408082208685039055918616815290812080548592906108f3908490610ce8565b92505081905550836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161093f91815260200190565b60405180910390a35050505050565b6001600160a01b0382166109a45760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161033a565b60006109ae610618565b9050818160020160008282546109c49190610ce8565b90915550506001600160a01b038316600090815260208290526040812080548492906109f1908490610ce8565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610764565b6001600160a01b038216610a945760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161033a565b6000610a9e610618565b6001600160a01b038416600090815260208290526040812080549293508492909190610acb908490610d00565b9250508190555081816002016000828254610ae69190610d00565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610764565b828054610b3590610d17565b90600052602060002090601f016020900481019282610b575760008555610b9d565b82601f10610b7057805160ff1916838001178555610b9d565b82800160010185558215610b9d579182015b82811115610b9d578251825591602001919060010190610b82565b50610ba9929150610bad565b5090565b5b80821115610ba95760008155600101610bae565b80356001600160a01b0381168114610bd957600080fd5b919050565b600060208284031215610bef578081fd5b610bf882610bc2565b9392505050565b60008060408385031215610c11578081fd5b610c1a83610bc2565b9150610c2860208401610bc2565b90509250929050565b600080600060608486031215610c45578081fd5b610c4e84610bc2565b9250610c5c60208501610bc2565b9150604084013590509250925092565b60008060408385031215610c7e578182fd5b610c8783610bc2565b946020939093013593505050565b6000602080835283518082850152825b81811015610cc157858101830151858201604001528201610ca5565b81811115610cd25783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610cfb57610cfb610d52565b500190565b600082821015610d1257610d12610d52565b500390565b600181811c90821680610d2b57607f821691505b60208210811415610d4c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220b69781fe2fbf3500439bb83831ec622c05c0c7471f49ff54ecf341ef099f2e1864736f6c63430008040033";

export class ERC20Mock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20Mock> {
    return super.deploy(
      name,
      symbol,
      decimals,
      supply,
      overrides || {}
    ) as Promise<ERC20Mock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    decimals: BigNumberish,
    supply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals,
      supply,
      overrides || {}
    );
  }
  attach(address: string): ERC20Mock {
    return super.attach(address) as ERC20Mock;
  }
  connect(signer: Signer): ERC20Mock__factory {
    return super.connect(signer) as ERC20Mock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MockInterface {
    return new utils.Interface(_abi) as ERC20MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mock;
  }
}
