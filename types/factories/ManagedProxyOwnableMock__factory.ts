/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ManagedProxyOwnableMock,
  ManagedProxyOwnableMockInterface,
} from "../ManagedProxyOwnableMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "manager",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "managerSelector",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getManager",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516105d73803806105d783398101604081905261002f916100b9565b6001600160e01b031981166080526100468261004d565b5050610109565b6100758161006361007860201b6103a51760201c565b61009c60201b6103c91790919060201c565b50565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b81546001600160a01b0319166001600160a01b0391909116179055565b600080604083850312156100cb578182fd5b82516001600160a01b03811681146100e1578283fd5b60208401519092506001600160e01b0319811681146100fe578182fd5b809150509250929050565b6080516001600160e01b0319166104a961012e60003960006101a801526104a96000f3fe60806040526004361061004e5760003560e01c806313af4035146100f05780638da5cb5b14610112578063aaf10f4214610143578063d500958414610158578063f2fde38b1461016d57610055565b3661005557005b600061005f61018d565b90506001600160a01b0381163b6100cc5760405162461bcd60e51b815260206004820152602660248201527f50726f78793a20696d706c656d656e746174696f6e206d75737420626520636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b3660008037600080366000845af43d6000803e8080156100eb573d6000f35b3d6000fd5b3480156100fc57600080fd5b5061011061010b3660046103e6565b6102b9565b005b34801561011e57600080fd5b506101276102ce565b6040516001600160a01b03909116815260200160405180910390f35b34801561014f57600080fd5b506101276102e7565b34801561016457600080fd5b506101276102f6565b34801561017957600080fd5b506101106101883660046103e6565b610300565b600080600061019a6102ce565b6040516001600160e01b03197f00000000000000000000000000000000000000000000000000000000000000001660208201526001600160a01b03919091169060240160408051601f19818403018152908290526101f791610425565b600060405180830381855afa9150503d8060008114610232576040519150601f19603f3d011682016040523d82523d6000602084013e610237565b606091505b50915091508161029e5760405162461bcd60e51b815260206004820152602c60248201527f4d616e6167656450726f78793a206661696c656420746f20666574636820696d60448201526b383632b6b2b73a30ba34b7b760a11b60648201526084016100c3565b808060200190518101906102b29190610409565b9250505090565b6102cb816102c56103a5565b906103c9565b50565b60006102d86103a5565b546001600160a01b0316919050565b60006102f161018d565b905090565b60006102f16102ce565b6103086103a5565b546001600160a01b031633146103605760405162461bcd60e51b815260206004820152601d60248201527f4f776e61626c653a2073656e646572206d757374206265206f776e657200000060448201526064016100c3565b61036c816102c56103a5565b6040516001600160a01b0382169033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b81546001600160a01b0319166001600160a01b0391909116179055565b6000602082840312156103f7578081fd5b81356104028161045e565b9392505050565b60006020828403121561041a578081fd5b81516104028161045e565b60008251815b81811015610445576020818601810151858301520161042b565b818111156104535782828501525b509190910192915050565b6001600160a01b03811681146102cb57600080fdfea2646970667358221220bcffd2ee3d220a44974566a7568d93e486391213c5ac4ad34b8d3d025a0ea59f64736f6c63430008040033";

export class ManagedProxyOwnableMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    manager: string,
    managerSelector: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ManagedProxyOwnableMock> {
    return super.deploy(
      manager,
      managerSelector,
      overrides || {}
    ) as Promise<ManagedProxyOwnableMock>;
  }
  getDeployTransaction(
    manager: string,
    managerSelector: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      manager,
      managerSelector,
      overrides || {}
    );
  }
  attach(address: string): ManagedProxyOwnableMock {
    return super.attach(address) as ManagedProxyOwnableMock;
  }
  connect(signer: Signer): ManagedProxyOwnableMock__factory {
    return super.connect(signer) as ManagedProxyOwnableMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ManagedProxyOwnableMockInterface {
    return new utils.Interface(_abi) as ManagedProxyOwnableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ManagedProxyOwnableMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ManagedProxyOwnableMock;
  }
}
