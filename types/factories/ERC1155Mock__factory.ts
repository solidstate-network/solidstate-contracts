/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC1155Mock, ERC1155MockInterface } from "../ERC1155Mock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506200004a6301ffc9a760e01b6001620000356200007360201b620006961760201c565b6200009760201b620006ba179092919060201c565b6200006d636cdb3d1360e11b6001620000356200007360201b620006961760201c565b62000124565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b03198083161415620000f65760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604482015260640160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b61182d80620001346000396000f3fe608060405234801561001057600080fd5b50600436106100925760003560e01c80634e1273f4116100665780634e1273f414610108578063a22cb46514610128578063e985e9c51461013b578063f242432a1461014e578063f5298aca1461016157600080fd5b8062fdd58e1461009757806301ffc9a7146100bd578063156e29f6146100e05780632eb2c2d6146100f5575b600080fd5b6100aa6100a5366004611253565b610174565b6040519081526020015b60405180910390f35b6100d06100cb366004611379565b61021a565b60405190151581526020016100b4565b6100f36100ee36600461127c565b61024f565b005b6100f3610103366004611110565b61026f565b61011b6101163660046112ae565b6102bc565b6040516100b491906114e0565b6100f3610136366004611219565b610502565b6100d06101493660046110de565b6105f8565b6100f361015c3660046111b6565b610645565b6100f361016f36600461127c565b61068b565b60006001600160a01b0383166101e55760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b6000805160206117d88339815191526000928352602090815260408084206001600160a01b0395909516845293905250205490565b600061024982610228610696565b906001600160e01b0319166000908152602091909152604090205460ff1690565b92915050565b61026a83838360405180602001604052806000815250610742565b505050565b6001600160a01b03851633148061028b575061028b85336105f8565b6102a75760405162461bcd60e51b81526004016101dc906115c7565b6102b5338686868686610851565b5050505050565b606081518351146103215760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016101dc565b82516000805160206117d88339815191529060009067ffffffffffffffff81111561035c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610385578160200160208202803683370190505b50905060005b85518110156104f95760006001600160a01b03168682815181106103bf57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156104385760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527020746865207a65726f206164647265737360781b60648201526084016101dc565b82600086838151811061045b57634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001908152602001600020600087838151811061049357634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106104dc57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806104f1816116d5565b91505061038b565b50949350505050565b336001600160a01b038316141561056d5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016101dc565b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b6001600160a01b038516331480610661575061066185336105f8565b61067d5760405162461bcd60e51b81526004016101dc906115c7565b6102b5338686868686610875565b61026a838383610891565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b031980831614156107145760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e746572666163652069640000000060448201526064016101dc565b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0384166107a25760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016101dc565b6107bb336000866107b287610a2d565b6102b587610a2d565b60008381526000805160206117d8833981519152602090815260408083206001600160a01b03881684529182905282208054919285926107fc908490611679565b909155505060408051858152602081018590526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b61085f868686868686610a86565b61086d868686868686610bfa565b505050505050565b610883868686868686610df6565b61086d868686868686610ec0565b6001600160a01b0383166108f35760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016101dc565b6109223384600061090386610a2d565b61090c86610a2d565b5050604080516020810190915260009052505050565b60008281526000805160206117d8833981519152602090815260408083206001600160a01b038716845291829052909120548211156109b15760405162461bcd60e51b815260206004820152602560248201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015264616e63657360d81b60648201526084016101dc565b6001600160a01b038416600090815260208290526040812080548492906109d9908490611691565b909155505060408051848152602081018490526000916001600160a01b0387169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610a7557634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b1561086d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610aca908990899088908890889060040161143d565b602060405180830381600087803b158015610ae457600080fd5b505af1925050508015610b14575060408051601f3d908101601f19168201909252610b119181019061139c565b60015b610bc157610b2061171c565b806308c379a01415610b5a5750610b35611734565b80610b405750610b5c565b8060405162461bcd60e51b81526004016101dc9190611521565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016101dc565b6001600160e01b0319811663bc197c8160e01b14610bf15760405162461bcd60e51b81526004016101dc90611534565b50505050505050565b6001600160a01b038416610c205760405162461bcd60e51b81526004016101dc90611610565b8151835114610c825760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016101dc565b6000805160206117d883398151915260005b8451811015610d95576000858281518110610cbf57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610ceb57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815286835260408082206001600160a01b038e168352909352919091205490915081811015610d3b5760405162461bcd60e51b81526004016101dc9061157c565b6000838152602086815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610d78908490611679565b925050819055505050508080610d8d906116d5565b915050610c94565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610de59291906114f3565b60405180910390a450505050505050565b6001600160a01b0384163b1561086d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610e3a908990899088908890889060040161149b565b602060405180830381600087803b158015610e5457600080fd5b505af1925050508015610e84575060408051601f3d908101601f19168201909252610e819181019061139c565b60015b610e9057610b2061171c565b6001600160e01b0319811663f23a6e6160e01b14610bf15760405162461bcd60e51b81526004016101dc90611534565b6001600160a01b038416610ee65760405162461bcd60e51b81526004016101dc90611610565b610ef58686866107b287610a2d565b60008381526000805160206117d8833981519152602081815260408084206001600160a01b038a1685529091529091205483811015610f465760405162461bcd60e51b81526004016101dc9061157c565b6000858152602083815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610f83908490611679565b909155505060408051868152602081018690526001600160a01b03808916928a821692918c16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050505050565b80356001600160a01b0381168114610ff657600080fd5b919050565b600082601f83011261100b578081fd5b8135602061101882611655565b60405161102582826116a8565b8381528281019150858301600585901b87018401881015611044578586fd5b855b8581101561106257813584529284019290840190600101611046565b5090979650505050505050565b600082601f83011261107f578081fd5b813567ffffffffffffffff81111561109957611099611706565b6040516110b0601f8301601f1916602001826116a8565b8181528460208386010111156110c4578283fd5b816020850160208301379081016020019190915292915050565b600080604083850312156110f0578182fd5b6110f983610fdf565b915061110760208401610fdf565b90509250929050565b600080600080600060a08688031215611127578081fd5b61113086610fdf565b945061113e60208701610fdf565b9350604086013567ffffffffffffffff8082111561115a578283fd5b61116689838a01610ffb565b9450606088013591508082111561117b578283fd5b61118789838a01610ffb565b9350608088013591508082111561119c578283fd5b506111a98882890161106f565b9150509295509295909350565b600080600080600060a086880312156111cd578081fd5b6111d686610fdf565b94506111e460208701610fdf565b93506040860135925060608601359150608086013567ffffffffffffffff81111561120d578182fd5b6111a98882890161106f565b6000806040838503121561122b578182fd5b61123483610fdf565b915060208301358015158114611248578182fd5b809150509250929050565b60008060408385031215611265578182fd5b61126e83610fdf565b946020939093013593505050565b600080600060608486031215611290578283fd5b61129984610fdf565b95602085013595506040909401359392505050565b600080604083850312156112c0578182fd5b823567ffffffffffffffff808211156112d7578384fd5b818501915085601f8301126112ea578384fd5b813560206112f782611655565b60405161130482826116a8565b8381528281019150858301600585901b870184018b1015611323578889fd5b8896505b8487101561134c5761133881610fdf565b835260019690960195918301918301611327565b5096505086013592505080821115611362578283fd5b5061136f85828601610ffb565b9150509250929050565b60006020828403121561138a578081fd5b8135611395816117be565b9392505050565b6000602082840312156113ad578081fd5b8151611395816117be565b6000815180845260208085019450808401835b838110156113e7578151875295820195908201906001016113cb565b509495945050505050565b60008151808452815b81811015611417576020818501810151868301820152016113fb565b818111156114285782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611469908301866113b8565b828103606084015261147b81866113b8565b9050828103608084015261148f81856113f2565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906114d5908301846113f2565b979650505050505050565b60208152600061139560208301846113b8565b60408152600061150660408301856113b8565b828103602084015261151881856113b8565b95945050505050565b60208152600061139560208301846113f2565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602b908201527f455243313135353a20696e73756666696369656e742062616c616e636573206660408201526a37b9103a3930b739b332b960a91b606082015260800190565b60208082526029908201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260408201526808185c1c1c9bdd995960ba1b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b600067ffffffffffffffff82111561166f5761166f611706565b5060051b60200190565b6000821982111561168c5761168c6116f0565b500190565b6000828210156116a3576116a36116f0565b500390565b601f8201601f1916810167ffffffffffffffff811182821017156116ce576116ce611706565b6040525050565b60006000198214156116e9576116e96116f0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561173157600481823e5160e01c5b90565b600060443d10156117425790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561177257505050505090565b828501915081518181111561178a5750505050505090565b843d87010160208285010111156117a45750505050505090565b6117b3602082860101876116a8565b509095945050505050565b6001600160e01b0319811681146117d457600080fd5b5056fe1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68ba26469706673582212206d93ee3ad4246f8c8383f18d4f7e037a7c33e26afc95035382f3099f2fc2246764736f6c63430008040033";

export class ERC1155Mock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1155Mock> {
    return super.deploy(overrides || {}) as Promise<ERC1155Mock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC1155Mock {
    return super.attach(address) as ERC1155Mock;
  }
  connect(signer: Signer): ERC1155Mock__factory {
    return super.connect(signer) as ERC1155Mock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155MockInterface {
    return new utils.Interface(_abi) as ERC1155MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155Mock {
    return new Contract(address, _abi, signerOrProvider) as ERC1155Mock;
  }
}
