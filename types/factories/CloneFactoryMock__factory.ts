/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CloneFactoryMock,
  CloneFactoryMockInterface,
} from "../CloneFactoryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "calculateCloneDeploymentAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deployClone",
    outputs: [
      {
        internalType: "address",
        name: "cloneContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
    ],
    name: "deployClone",
    outputs: [
      {
        internalType: "address",
        name: "cloneContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102d5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630227bcf01461004657806316885df81461006a5780638da44ffb1461007d575b600080fd5b61004e610090565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610287565b61009f565b61004e61008b366004610287565b6100b0565b600061009a6100bb565b905090565b60006100aa826100e8565b92915050565b60006100aa82610180565b600061009a6040518060400160405280600a81526020016958333b90818180333cf360b01b8152506101ae565b604080518082018252600a81526958333b90818180333cf360b01b60209182015281516001600160f81b0319818301526bffffffffffffffffffffffff193060601b166021820152603581018490527f708ef207f8f8e4b4e2b1c5f68c91cce67feffa2f17be65b8699eaba5d867f23760558083019190915283518083039091018152607590910190925281519101206000906100aa565b60006100aa6040518060400160405280600a81526020016958333b90818180333cf360b01b8152508361021f565b600081602001825180826000f0925050506001600160a01b03811661021a5760405162461bcd60e51b815260206004820152601a60248201527f466163746f72793a206661696c6564206465706c6f796d656e7400000000000060448201526064015b60405180910390fd5b919050565b60008260200183518381836000f5925050506001600160a01b0381166100aa5760405162461bcd60e51b815260206004820152601a60248201527f466163746f72793a206661696c6564206465706c6f796d656e740000000000006044820152606401610211565b600060208284031215610298578081fd5b503591905056fea264697066735822122087854deb646d2260b85fd508cc75d363f44cba111a1eab4b4488ddf05056587164736f6c63430008040033";

export class CloneFactoryMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CloneFactoryMock> {
    return super.deploy(overrides || {}) as Promise<CloneFactoryMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CloneFactoryMock {
    return super.attach(address) as CloneFactoryMock;
  }
  connect(signer: Signer): CloneFactoryMock__factory {
    return super.connect(signer) as CloneFactoryMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CloneFactoryMockInterface {
    return new utils.Interface(_abi) as CloneFactoryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CloneFactoryMock {
    return new Contract(address, _abi, signerOrProvider) as CloneFactoryMock;
  }
}
